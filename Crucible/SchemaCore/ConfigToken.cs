using System;
using System.Collections.Generic;
using System.Text;
using SchemaForge.Crucible.Extensions;
using Newtonsoft.Json.Linq;

namespace SchemaForge.Crucible
{
  public class ConfigToken
  {
    /// <summary>
    /// Name of the token; corresponds to a token present in the JObject that will be validated.
    /// </summary>
    public string TokenName { get; private set; }
    /// <summary>
    /// String that will be added to the ErrorList of a Schema object as ErrorSeverity.Info when a validation error occurs for this token.
    /// </summary>
    public string HelpString { get; private set; }
    /// <summary>
    /// If set and the token is optional, then if the user does not include this token in their configuration file, the default value will be inserted with TokenName as the property name.
    /// </summary>
    public string DefaultValue { get; private set; }
    /// <summary>
    /// Contains all the errors generated by validation functions.
    /// </summary>
    public List<Error> ErrorList { get; private set; } = new();
    /// <summary>
    /// The function that will be executed on the passed token value.
    /// </summary>
    protected ConstraintContainer Constraints { get; private set; }

    /// <summary>
    /// A ConfigToken represents a token that is expected to exist in the input JObject to a Schema object.
    /// </summary>
    /// <exception cref="ArgumentException">If inputName or inputHelpString is null, whitespace, or empty.</exception>
    /// <param name="inputName">Name of the token. This will be used to search the user config when validating.</param>
    /// <param name="inputHelpString">String that will be shown to the user in the event of a validation error.</param>
    /// <param name="inputValidationFunction">Function that will be executed on the corresponding value in the input config. Ideally created by ApplyConstraints().</param>
    public ConfigToken(string inputName, string inputHelpString, ConstraintContainer constraintContainer)
    {
      BuildConfigToken(inputName, inputHelpString, null, constraintContainer);
    }

    /// <summary>
    /// A ConfigToken represents a token that is expected to exist in the input JObject to a Schema object.
    /// </summary>
    /// <exception cref="ArgumentException">If inputName or inputHelpString is null, whitespace, or empty.</exception>
    /// <param name="inputName">Name of the token. This will be used to search the user config when validating.</param>
    /// <param name="inputHelpString">String that will be shown to the user in the event of a validation error.</param>
    /// <param name="inputDefaultValue">String that will be inserted into the user config if an optional token is not provided.</param>
    /// <param name="inputValidationFunction">Function that will be executed on the corresponding value in the input config. Ideally created by ApplyConstraints().></param>
    public ConfigToken(string inputName, string inputHelpString, string inputDefaultValue,ConstraintContainer constraintContainer)
    {
      BuildConfigToken(inputName, inputHelpString, inputDefaultValue, constraintContainer);
    }

    private void BuildConfigToken(string inputName, string inputHelpString, string inputDefaultValue, ConstraintContainer constraintContainer)
    {
      if (inputName.IsNullOrEmpty())
      {
        throw new ArgumentException("Name of ConfigToken is null or empty.");
      }
      if (inputHelpString.IsNullOrEmpty())
      {
        throw new ArgumentException($"HelpString of config token {inputName} is null or empty.");
      }
      TokenName = inputName;
      Constraints = constraintContainer;
      HelpString = inputHelpString;
      DefaultValue = inputDefaultValue;
    }
    
    /// <summary>
    /// Executes the ConfigToken's ValidationFunction on the passed JToken.
    /// </summary>
    /// <param name="tokenValue">Token value to validate.</param>
    /// <returns>Bool indicating whether any fatal errors were found during validation.</returns>
    public bool Validate(JToken tokenValue)
    {
      ErrorList.AddRange(Constraints.ApplyConstraints(tokenValue, TokenName));
      return !ErrorList.AnyFatal();
    }
    public override string ToString()
    {
      return TokenName;
    }
  }
}
